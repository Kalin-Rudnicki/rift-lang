
// Generics
class Klass<T> // class Klass<var<T>>
{
	T data;		var<T> data;
}
class Klass<T, U> // class Klass<var<T>, var<U>>
class Klass<<T, U>> // class Klass<var<T, U>>

// VarArgs
void test(Int... ints)						// void test(var<Int>... ints) {...}
void test(Int... int, String... strings)	// void test(var<Int>... ints, var<String>... strings)
void test((String firstName, String lastName, Int age)... people);
// people[x].firstName // people[x].lastName

void test((String firstName, String lastName, Int age, Person... friends)... people)
// people[x].friends => Array<Friend>

// IMPORTANT:::
// This NEEDS to be a valid line of code:
// List<K> list = new List<K>();

class Object
{
	
	? methodMissing(Symbol methodName, ?... args, /* how to do lambdas */) { // raise error }
	
}

// uses rubies 'methodMissing'
// ~ points to methodMissing automatically
// ex: myStuff~a(1, 2) // => myStuff.methodMissing(:a, 1, 2)

// numerics
	// -----
	// Char => 1 byte? unicode?
	// Byte => 1 byte
	// Short => 2 bytes
	// Integer => 4 bytes
	// Long => 8 bytes ? 32-64?
	// Int => variable length (default?)
	// -----
	// Float => 4 bytes
	// Double => 8 bytes?
	// Rational => Int / Int (default?)