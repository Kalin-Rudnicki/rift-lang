
// Exceptions
class Exception
{
	
	protected String -message; // generates a getter
	
	Exception(String message = null)
	{
		this.message = message;
	}
	
}

class CheckedException < Exception {}
class UncheckedException < Exception {}

// CheckedException = java:Exception
// UnCheckedException = java:RuntimeException


// Eval / 'IRB'
// must be able to "eval" a file/string with the guarentee that it evals to a certain thing
// ex:
Person loadedPerson = eval<Person>("Person.new(\"Kalin\", \"Rudnicki\", 20);");
// Do these files simply get parsed? compiled?
// same compile rules apply? specify different compile rules? always least strict?
// block evals?

? test() {}

Int i = test();
// Allow this?
// Ability to assign less explicit types to more explicit types without casting?
// Do I even want casting?
// Generate a compiler warning?
// Why even have casting, all that casting would do is throw a runtime exception anyway...
// Decision: No casting

Vehicle v = Car.new("Ferrari", "558");
Car c = v; // Just fine
Truck t = v; // TypeConversionError
Truck t = c; // Compile error

// You must call a parent constructor, but it does not have to be the FIRST thing in your constructor
// that being said... you are not allowed to make any call any instance methods or make assignments to instance variables until that happens
// Calling static methods is allowed, and writing multiple lines of code is also allowed
// Argument checking is also allowed
// Ex:
Test(Int data)
{
    Int data2 = data + 1;
    super(data2);
}

// in the more dynamic modes, MyKlassThatDoesntExist, will compile just fine, but obviously errors out at runtime